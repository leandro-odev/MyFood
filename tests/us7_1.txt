# User Story 7 - Criação de Entregador
# Permita a um usuário criar uma conta no MyFood, O usuário poderá ser agora de tres tipos, Cliente e Dono de Empresa e Entregador.
#
# Os dados gerais para os usuários são:
# id -> Que deve ser do tipo int e único gerado pelo sistema.
# nome -> Informado na criação do tipo String, pode existir vários usuários com o mesmo nome.
# email -> Informado na criação do tipo String, deve ser único por usuário.
# senha -> Informada na criação do tipo String, pode existir vários usuários com a mesma senha.
#
# Os usuários do tipo entregador devem além dos dados gerais possuir os seguintes dados:
# endereco -> o endereço do usuário no tipo String.
# veiculo -> o tipo do veculo usado, do tipo String, a qual as entregas são realizadas.
# placa -> o codigo da placa do veiculo, deve ser unico e do tipo String.
#
#
###################
# Os métodos que são utilizados nos testes podem ser vistos a seguir:
###################
# zerarSistema
# descrição: Apaga todos os dados no banco de dados do sistema.
# retorno: Sem retorno
#
# getAtributoUsuario(int:id, String nome)
# descrição: Obtém os dados de um usuário.
# retorno: Uma String com o valor do atributo.
#
# criarUsuario(String: nome, String: email, String: senha, String: endereco, String veiculo, String placa)
# descrição: Cria um usuário do tipo entregador.
# retorno: Sem retorno
#
# login(String: email, String: senha)
# descrição: Válida se um usuário está devidamente cadastrado e se existe com os dados fornecidos
# retorno: Retorna o id do usuário.
#
# cadastrarEntregador(int: empresa, int: entregador)
# descrição: Cadastra um entregador a uma empresa a qual ele faz entregas, o mesmo entregador nao pode trabalhar duas vezes na mesma empresa.
# retorno: Sem retorno.
#
# getEntregadores(int: empresa)
# descrição: Retorna todos os emails dos entregadores que estão alocados em uma empresa.
# retorno: Uma lista contendo o email de todos os entregadores da empresa.
#
# getEmpresas(int: entregador)
# descrição: Retorna os nomes e endereços de todas as empresas a qual o entregador trabalha .
# retorno: Uma lista contendo o nome e endereço de todas as empresa a qual tem o trabalhador vinculado.
#
# encerrarSistema
# descrição: Finaliza a execução do programa
# retorno: Sem retorno


# Apaga toda a base de dados.
zerarSistema

expectError "Usuario nao cadastrado." getAtributoUsuario id=9999 atributo="nome"

criarUsuario nome="Rodrigo" email="rodrigo@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 123" veiculo="moto" placa="BRA 1234"

# Se a senha estiver correta, a sessão é aberta e o teste passa sem erros. 
# Se existir algum erro, o programa vai lançar uma exceção e o EasyAccept vai acusar erro nessa linha.
id1=login email="rodrigo@ufal.com.br" senha="123senha"

criarUsuario nome="CarlosDono" email="carlos@ufal.com.br"  senha="123senha" endereco="Rua Exemplo N 321" cpf="544.732.410-68"

id2=login email="carlos@ufal.com.br" senha="123senha"

eid1=criarEmpresa tipoEmpresa="restaurante"  dono=${id2} nome="Pastelaria" endereco="Rua Segura N 987" tipoCozinha="brasileira"
eid2=criarEmpresa tipoEmpresa="mercado" dono=${id2} nome="Mercado" endereco="Rua Segura N 123" abre="07:30" fecha="21:00" tipoMercado="supermercado"
eid3=criarEmpresa tipoEmpresa="farmacia" dono=${id2} nome="Farmacia" endereco="Rua Segura N 123" aberto24Horas=true numeroFuncionarios=2

###################
# testes de todas as outras combinações importantes para o comando criarUsuario
###################

# Cada usuário está associado a um único email.
expectError "Conta com esse email ja existe" criarUsuario nome="Rodrigo2" email="rodrigo@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 123"

# É possível existir mais usuários com o mesmo nome e endereço, desde que o email seja diferente.
criarUsuario nome="Rodrigo" email="rodrigo2@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 321" veiculo="moto" placa="BRA 4321"

id3=login email="rodrigo2@ufal.com.br" senha="123senha"

expect "Rodrigo" getAtributoUsuario id=${id1} atributo="nome"
expect "rodrigo@ufal.com.br" getAtributoUsuario id=${id1} atributo="email"
expect "Rua Exemplo N 123" getAtributoUsuario id=${id1} atributo="endereco"
expect "moto" getAtributoUsuario id=${id1} atributo="veiculo"
expect "BRA 1234" getAtributoUsuario id=${id1} atributo="placa"

# Validando dados ao criar o usuário.
expectError "Nome invalido" criarUsuario nome=  email="carlos@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 123" veiculo="moto" placa="BRA 4567"
expectError "Nome invalido" criarUsuario nome=""  email="carlos@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 123" veiculo="moto" placa="BRA 4567"

expectError "Email invalido" criarUsuario nome="Carlos" email=  senha="123senha" endereco="Rua Exemplo N 123" veiculo="moto" placa="BRA 4567"
expectError "Email invalido" criarUsuario nome="Carlos" email=""  senha="123senha" endereco="Rua Exemplo N 123" veiculo="moto" placa="BRA 4567"

expectError "Senha invalido" criarUsuario nome="Carlos" email="carlos@ufal.com.br" senha=  endereco="Rua Exemplo N 123" veiculo="moto" placa="BRA 4567"
expectError "Senha invalido" criarUsuario nome="Carlos" email="carlos@ufal.com.br" senha=""  endereco="Rua Exemplo N 123" veiculo="moto" placa="BRA 4567"

expectError "Endereco invalido" criarUsuario nome="Carlos" email="carlos@ufal.com.br" senha="123senha" endereco=  veiculo="moto" placa="BRA 4567"
expectError "Endereco invalido" criarUsuario nome="Carlos" email="carlos@ufal.com.br" senha="123senha" endereco="" veiculo="moto" placa="BRA 4567"

expectError "Veiculo invalido" criarUsuario nome="Carlos" email="carlos@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 123" veiculo= placa="BRA 4567"
expectError "Veiculo invalido" criarUsuario nome="Carlos" email="carlos@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 123" veiculo="" placa="BRA 4567"

expectError "Placa invalido" criarUsuario nome="Carlos" email="carlos@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 123" veiculo="moto" placa=
expectError "Placa invalido" criarUsuario nome="Carlos" email="carlos@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 123" veiculo="moto" placa=""
expectError "Placa invalido" criarUsuario nome="Carlos" email="carlos@ufal.com.br" senha="123senha" endereco="Rua Exemplo N 123" veiculo="moto" placa="BRA 4321"

# Valida se o email esta no formato correto.
expectError "Email invalido" criarUsuario nome="CarlosDono" email="carlos2" senha="123senha" endereco="Rua Exemplo N 321" veiculo="moto" placa="BRA 4567"

###################
# cadastrando entregadores as empresas.
###################

cadastrarEntregador empresa=${eid1} entregador=${id1}
cadastrarEntregador empresa=${eid2} entregador=${id1}

cadastrarEntregador empresa=${eid1} entregador=${id3}

expectError "Usuario nao e um entregador" cadastrarEntregador empresa=${eid1} entregador=${id2}

###################
# Listando entregadores vinculados a uma empresa.
###################

expect "{[rodrigo@ufal.com.br, rodrigo2@ufal.com.br]}" getEntregadores empresa=${eid1}
expect "{[rodrigo@ufal.com.br]}" getEntregadores empresa=${eid2}
expect "{[]}" getEntregadores empresa=${eid3}

###################
# Listando empresas vinculados a quais o entregador trabalha.
###################

expect "{[[Pastelaria, Rua Segura N 987], [Mercado, Rua Segura N 123]]}" getEmpresas entregador=${id1}
expect "{[[Pastelaria, Rua Segura N 987]]}" getEmpresas entregador=${id3}

expectError "Usuario nao e um entregador" getEmpresas entregador=${id2}

encerrarSistema
quit